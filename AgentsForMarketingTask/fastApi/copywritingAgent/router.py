import re
import os
import io
import json
import logging
import base64
import requests
import warnings
import numpy as np
import gradio as gr
from PIL import Image
from io import StringIO
from paddleocr import PaddleOCR
from transformers import pipeline
from langchain_groq import ChatGroq
from langchain.chains.llm import LLMChain
from langchain.prompts import PromptTemplate
from langchain.chains import ConversationChain
from langchain.tools import DuckDuckGoSearchRun
from langchain.utilities import WikipediaAPIWrapper
from langchain.agents import Tool, initialize_agent
from langchain_core.prompts import ChatPromptTemplate
from langchain.chains.router import MultiPromptChain
from dotenv import load_dotenv, find_dotenv
from langchain_community.utilities import GoogleSerperAPIWrapper
from langchain.chains.router.llm_router import LLMRouterChain, RouterOutputParser
from langchain.chains.router.multi_prompt_prompt import MULTI_PROMPT_ROUTER_TEMPLATE

# Load environment variables
config = find_dotenv(".env")
load_dotenv()

groq_api = os.getenv("GROQ_API_KEY")
huggingface_token = os.getenv("HUGGINGFACE_TOKEN")
serper_api = os.getenv("SERPER_API_KEY")

ocr = PaddleOCR(lang='en', use_angle_cls=True)
captioner = pipeline("image-to-text", model="Salesforce/blip-image-captioning-large")

def ocrWithPaddle(img):
    """
    Use PaddleOCR to perform optical character recognition (OCR) on an image.
    
    Args:
    - img: PIL.Image object representing the input image
    
    Returns:
    - text: Extracted text from the image
    """
    result = ocr.ocr(img)
    text = ' '.join(item[1][0] for item in result[0])
    return text

def imageToPrompt(img):
    """
    Convert an image to a prompt by performing OCR and generating text captions.
    
    Args:
    - img: PIL.Image object representing the input image
    
    Returns:
    - prompt: Prompt generated from the image
    """
    arr = np.array(img)
    textOutput = ocrWithPaddle(arr)
    result = captioner(img)
    textParts = [item['generated_text'] for item in result]
    return ' Text on the Image:'.join(textParts + [textOutput]) 


def initializeZeroShotAgent(prompt, temp, maxTokens, topP, frequencyPenalty, presencePenalty):
    """
    Initialize the zero-shot agent for generating responses.
    
    Args:
    - prompt: Prompt for the agent
    - temp: Temperature parameter for text generation
    - maxTokens: Maximum number of tokens to generate
    - topP: Top-p sampling parameter
    - frequencyPenalty: Frequency penalty parameter
    - presencePenalty: Presence penalty parameter
    
    Returns:
    - response: Response generated by the agent
    """
    '''
    bnb_config = BitsAndBytesConfig(
        load_in_4bit= True,
        bnb_4bit_quant_type= "nf4",
        bnb_4bit_compute_dtype= torch.bfloat16,
        bnb_4bit_use_double_quant= False,)
    
    device = get_device_map()  # 'cpu'
    
    model_id="mistralai/Mixtral-8x22B-v0.1"
    
    tokenizer = AutoTokenizer.from_pretrained(model_id)
    
    model =AutoModelForCausalLM.from_pretrained(model_id, quantization_config=bnb_config, device_map="auto", torch_dtype=torch.float16)
    print(model.get_memory_footprint())
    generate_text = transformers.pipeline(
        model=model,
        tokenizer=tokenizer,
        temperature=temp,
        top_p=top_p,
        return_full_text=True,
        task='text-generation',
        max_new_tokens=max_tokens,
        frequency_penalty=frequency_penalty,
        presence_penalty=presence_penalty,
        num_return_sequences=1,
        repetition_penalty=1.1
    )
    
    llm = HuggingFacePipeline(pipeline=generate_text)
    '''
    # Comment the below llm from API If you want to use llm from Huggingface
    llm = ChatGroq(temperature=temp,
                   groq_api_key=groq_api,
                   model_name="mixtral-8x7b-32768",
                   max_tokens=maxTokens,
                   top_p=topP,
                   frequency_penalty=frequencyPenalty,
                   presence_penalty=presencePenalty)
    

    wikipedia = WikipediaAPIWrapper()
    search = DuckDuckGoSearchRun()
    googleSearch = GoogleSerperAPIWrapper(serper_api_key=serper_api)

    wikipediaTool = Tool(
        name='wikipedia',
        func=wikipedia.run,
        description="Useful for when you need to look up a topic, country or person on Wikipedia, the best website for fact-checking and finding details on any subject."
    )

    duckduckgoTool = Tool(
        name='DuckDuckGo Search',
        func=search.run,
        description="Useful for when you need to do a search on the internet to find information that another tool can't find. Always be specific with your input."
    )

    googleSearchTool = Tool(
        name="Google Search",
        func=googleSearch.run,
        description="Useful to search in Google. Use by default.",
    )
    
    tools = [
        Tool(
            name="Wikipedia Search",
            func=wikipedia.run,
            description="Useful for when you need to answer questions from the internet."
        )
    ]
    tools.append(duckduckgoTool)
    tools.append(googleSearchTool)

    zeroShotAgent = initialize_agent(
        agent="zero-shot-react-description",
        tools=tools,
        llm=llm,
        verbose=True,
        handle_parsing_errors=True,
        max_iterations=10,
    )

    return zeroShotAgent.run(prompt)


def menuPrompt(inputData):
    """
    Generate a prompt for the restaurant menu manager based on input data.
    
    Args:
    - inputData: Input data (name of the dish)
    
    Returns:
    - prompt: Prompt for the menu manager
    """
    promptMenu = f"""
    As a restaurant menu manager, your role is to gather below informations based on input data {inputData} (Name of the dish).
    generate the output
    
    ### information to be extracted :
    <Ingredients>: Only Ingredients included in the dish.
    <Description>: Briefly describe the dish.
    <Allergens>: Only Choose relevant options from this list - [Cereals, Crustaceans, Egg, Fish, Peanuts, SOYBEAN, Latte, Nuts, Celery, Mustard, Sesame seeds, Sulfur dioxide and sulphites, Shell, Clams].
    <Additional Information>: Only Choose relevant options from this list - [Spicy, Vegan, Gluten free, Vegetarian].
    
    ### Output Format
    {{
    ingredients: All Ingredients in a List,
    description: Description in a string,
    allergen: All allergen in a List,
    Additional_information: All Additional_information in a List
    }}
    
    ### Input data:
     {inputData}
    
    ### Output:
    """
    return promptMenu


def socialMediaPrompt(inputData, image):
    """
    Generate a prompt for the social media manager based on input data and image.
    
    Args:
    - inputData: Input data (goal for the posts)
    - image: Image for social media post
    
    Returns:
    - prompt: Prompt for the social media manager
    """
    promptSocialMedia = f"""
    As the social media manager of the restaurant, your task is to craft four Social Media Posts for Restaurant for their Facebook and Instagram pages based on the Input data [which contains a goal for the posts and Image description which is an additonal information for helping to write a posts] .
    
    ### Guidelines:
    * Craft the post with the goal of highlighting Input data.
    * Incorporate 3-5 emojis, ensuring no more than one emoji is used every two sentences.
    * Mention a maximum of 1 or 2 products from the menu.
    * Remember that social media posts are part of a content plan, not sponsored content.
    * Focus on showcasing the restaurant's strengths rather than directly promoting sales.
    * Include a Call to Action mentioning information such as opening hours, restaurant address, telephone number, or WhatsApp number, if available.
    * Direct audience attention to the online menu available at www.restaurants.menu.
    * Utilize hashtags at the end of the description, relevant to the content and objectives. Use the # symbol to add hashtags.
    
    ### Information to be Extracted:
    Generate four posts based on the above guidelines.
    
    ### Output Format:
    {{
    "Post1": "This is the content of Post 1.",
    "Post2": "This is the content of Post 2.",
    "Post3": "This is the content of Post 3.",
    "Post4": "This is the content of Post 4."
    }}
    
    ### Input data:
    {inputData}{image}
    
    ### Output:
    """
    return promptSocialMedia



def advertisingPrompt(inputData, buyersPersonas):
    """
    Generate a prompt for the advertising manager based on input data and buyer personas.
    
    Args:
    - inputData: Input data (goal for the descriptions)
    - buyersPersonas: Buyer personas information
    
    Returns:
    - prompt: Prompt for the advertising manager
    """
    advertisingMenu = f"""
    As the advertising manager of the restaurant, your task is to create compelling ad copy for a restaurant's based on the Input data [which contains a goal for the descriptions and Buyers Personas which is an additonal information for helping to write a descriptions] .
    The restaurant aim to attract a specific target audience described as the Buyers Personas.
    
    ### Guidelines:
    * The Call to Action should target the Buyer Personas.
    * Use emojis in the ad copy only if necessary.
    * Mention 2 products from menu.
    * Generated ad copy should be in only English language.
    * Create content related hashtags at the end of the ad copy.
    * Do not use restaurant info directly, use inside the generated ad text.
    ### Information to be Extracted:
    Generate four descriptions based on the above guidelines.
    
    ### Output Format:
    {{
    "Description1": "This is the content of Description 1.",
    "Description2": "This is the content of Description 2.",
    "Description3": "This is the content of Description 3.",
    "Description4": "This is the content of Description 4."
    }}
    
    ### Input data:
    {inputData}{buyersPersonas}
    ### Output:
    """

    return advertisingMenu


def newsletterPrompt(inputData):
    """
    Generate a prompt for the newsletter manager based on input data.
    
    Args:
    - inputData: Input data
    
    Returns:
    - prompt: Prompt for the newsletter manager
    """
    promptNewsletter = f"""
    As a Newsletter Manager, your task is to extract informations based on the input data {inputData}.
    ### information to be extracted :
    <campaign Name>: Identifies a marketing initiative
    <campaign Object>: Defines the primary goal of a marketing campaign
    <campaign Email>: Communication sent via email as part of a marketing campaign.
    ### Output Format
    {{
      "campaignName": [Suggest some good campaign Name]
      "campaignObject": [Suggest some good campaign Object],
      "campaignEmail": [Write a sample campaign Email based on Campaign Name and campaign Object],
    }}
    ### Input data:
     {inputData}
    ### Output:
    """
    return promptNewsletter


def responsepostProcess(text, keys):
    """
    Extract information from text based on specified keys.
    
    Args:
    - text: Input text
    - keys: List of keys to extract
    
    Returns:
    - result: Extracted information
    """
    pattern = r'\{[^{}]*\}'  # Regular expression pattern to match text within flower brackets
    matches = re.findall(pattern, text)
    result = ""
    for match in matches:
        if any(key in match for key in keys):
            result += match + "\n"
    return result


def structureResponseMenu(response_string):
    # Parse the JSON string
    response_data = json.loads(response_string)

    # Create the desired response format
    response = {
        "ingredients": response_data["ingredients"],
        "description": response_data["description"],
        "allergen": response_data["allergen"],
        "Additional_information": response_data["Additional_information"]
    }

    return response


def structureResponseSocial(response_string):
    # Parse the JSON string
    response_data = json.loads(response_string)

    # Create the desired response format
    response = {
        "Post1": response_data["Post1"],
        "Post2": response_data["Post2"],
        "Post3": response_data["Post3"],
        "Post4": response_data["Post4"]
    }

    return response


def structureResponseAdvertising(response_string):
    # Parse the JSON string
    response_data = json.loads(response_string)

    # Create the desired response format
    response = {
        "Description1": response_data["Description1"],
        "Description2": response_data["Description2"],
        "Description3": response_data["Description3"],
        "Description4": response_data["Description4"]
    }

    return response


def structureResponseNewsletter(response_string):
    # Parse the JSON string
    response_data = json.loads(response_string)

    # Create the desired response format
    response = {
        "campaignName": response_data["campaignName"],
        "campaignObject": response_data["campaignObject"],
        "campaignEmail": response_data["campaignEmail"]
    }

    return response

def agentMenu(goal):
    """
    Trigger the menu generation process.
    
    Args:
    - goal: Goal for menu generation
    
    Returns:
    - responseAgent: Generated response
    """
    print('Triggering Menu')
    promptMenu = menuPrompt(goal)
    responseAgent = initializeZeroShotAgent(promptMenu, 0.1, 32000, 0.1, 0.1, 0.1)
    responseAgent = responsepostProcess(responseAgent, ['ingredients', 'description', 'allergen','Additional_information'])
    responseAgent=structureResponseMenu(responseAgent)
    print('Finish Triggering Menu')
    return responseAgent


def agentSocialMedia(goal, image):
    """
    Trigger the social media post generation process.
    
    Args:
    - goal: Goal for social media posts
    - image: Image for social media
    
    Returns:
    - responseAgent: Generated response
    """
    print('Triggering Social Media')
    imageDescription = imageToPrompt(image)
    promptSocialMedia = socialMediaPrompt(goal, imageDescription)
    responseAgent = initializeZeroShotAgent(promptSocialMedia, 0.5, 32000, 0.5,0.1,0.1)
    responseAgent = responsepostProcess(responseAgent, ['Post1', 'Post2', 'Post3', 'Post4'])
    responseAgent=structureResponseSocial(responseAgent)
    print('Finish Triggering Social Media')
    return responseAgent


def agentAdvertising(goal, buyersPersonas):
    """
    Trigger the advertising copy generation process.
    
    Args:
    - goal: Goal for advertising copy
    - buyersPersonas: Buyer personas information
    
    Returns:
    - responseAgent: Generated response
    """
    print('Triggering Advertising')
    promptAdvertising = advertisingPrompt(goal, buyersPersonas)
    responseAgent = initializeZeroShotAgent(promptAdvertising, 0.5, 32000, 0.5,0.1,0.1)
    responseAgent = responsepostProcess(responseAgent, ['Description1', 'Description2', 'Description3', 'Description4'])
    responseAgent=structureResponseAdvertising(responseAgent)
    print('Finish Triggering Advertising')
    return responseAgent


def agentNewsletter(goal):
    """
    Trigger the newsletter generation process.
    
    Args:
    - goal: Goal for newsletter
    
    Returns:
    - responseAgent: Generated response
    """
    print('Triggering Newsletter')
    promptNewsletter = newsletterPrompt(goal)
    responseAgent = initializeZeroShotAgent(promptNewsletter, 0.5, 32000, 0.5,0.1,0.1)
    responseAgent = responsepostProcess(responseAgent, ['campaignName', 'campaignObject', 'campaignEmail'])
    responseAgent=structureResponseNewsletter(responseAgent)
    print('Finish Triggering Newsletter')
    return responseAgent
